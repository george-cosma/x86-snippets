{
	"Do-While loop": {
		"prefix": ["do-while", "loop"],
		"description": "Insert a do-while loop.",
		"body": [
			"\txor ${1:ecx}, $1",
			"${2:loop_start}:",
			"\t$0",
			"\t",
			"\tinc $1",
			"\tcmp $1, ${3:len}",
			"\tjb $2",
		]
	},
	"While loop": {
		"prefix": ["while", "for"],
		"description": "Insert a while loop.",
		"body": [
			"\txor ${1:ecx}, $1",
			"${2:loop_start}:",
			"\tcmp $1, ${3:len}",
			"\tjae ${4:loop_end}",
			"\t",
			"\t$0",
			"\t",
			"\tinc $1",
			"\tjmp $2",
			"$4:",
		]
	},
	"Do-While reverse loop": {
		"prefix": ["rev-do-while", "rev-loop"],
		"description": "Insert a do-while loop with a decreasing index.",
		"body": [
			"\tmov ${1:ecx}, ${2:len}",
			"${3:loop_start}:",
			"\t$0",
			"\t",
			"\tdec $1",
			"\tcmp $1, 0",
			"\tja $3",
		]
	},
	"While reverse loop": {
		"prefix": ["rev-while", "rev-for"],
		"description": "Insert a while loop with a decreasing index.",
		"body": [
			"\tmov ${1:ecx}, ${2:len}",
			"${3:loop_start}:",
			"\tcmp $1, 0",
			"\tje ${4:loop_end}",
			"\t",
			"\t$0",
			"\t",
			"\tdec $1",
			"\tjmp $3",
			"$4:",
		]
	},
	"Define Struct": {
		"prefix": ["define-struct", "struct"],
		"description": "Insert a definition for a struct.",
		"body": [
			"struc ${1:mystruct}",
			"\t$0",
			"endstruc"
		]
	},
	"Define Struct Field": {
		"prefix": ["define-field", "field"],
		"description": "Insert the definition of a field for a struct",
		"body": [
			".${1:my_field}:\t${2|resb,resw,resd|}\t${3:1}",
			"$0"
		]
	},
	"Instantiate Struct": {
		"prefix": ["instantiate-struct","init-struct"],
		"description": "Instantiate an instance of a struct.",
		"body": [
			"${1:struct_instance}:",
			"\tistruc ${2:mystruct}",
			"\t\t$0",
			"\tiend",
		]
	},
	"Instantiate Struct Field": {
		"prefix": ["instantiate-field", "init-field"],
		"description": "Insert the value of a field for an instance of a struct.",
		"body": [
			"at ${1:mystruct}.${2:my_field},\t${3|db,dw,dd|}\t${4:?}",
			"$0"
		]
	},
	"Insert Section": {
		"prefix": ["section"],
		"description": "Insert a section header.",
		"body": [
			"section ${1|.data,.text,.bss,.rodata|}",
			"\t$0"
		]
	},
	"Array length": {
		"prefix": ["ln"],
		"description": "Define the length of an array.",
		"body": [
			"${1:arr_len} equ ($ - ${2:arr}) / ${3:1}",
			"$0"
		]
	},
	"Define Main": {
		"prefix": ["main"],
		"description": "Define the main function and mark it as global.",
		"body": [
			"\tglobal main",
			"",
			"main:",
			"\tenter 0, 0",
			"\t",
			"\t$0",
			"\t",
			"\tleave",
			"\tret",
		]
	},
	"Define function": {
		"prefix": ["func"],
		"description": "Insert a function header.",
		"body": [
			"$LINE_COMMENT ${2:void} ${1:my_function}($3)",
			"$1:",
			"\tenter 0, 0",
			"\t",
			"\t$0",
			"\t",
			"\tleave",
			"\tret",
		]
	},
	"Insert macros": {
		"prefix": ["helper-macros", "helpers"],
		"description": "Insert some helper macros.",
		"body": [
"%macro precall 0",
"\t; Save volatile registers before a function call and",
"\t; before its arguments.",
"\tpush eax",
"\tpush ecx",
"\tpush edx",
"%endmacro",
"",
"%macro postcall 0",
"\t; Restore volatile registers after a function call and",
"\t; after stack realignment.",
"\tpop edx",
"\tpop ecx",
"\tpop eax",
"%endmacro",
"",
"%macro precall_return 0",
"\t; Save volatile registers before a function call that returns",
"\t; and before its arguments.",
"\tpush ecx",
"\tpush edx",
"%endmacro",
"",
"%macro postcall_return 0",
"\t; Restore volatile registers after a function call that returns",
"\t; and after stack realignment.",
"\tpop edx",
"\tpop ecx",
"%endmacro",
"",
"%macro save_nonvolatile 0",
"\t; Save all non-volatile data registers. This is meant to be used",
"\t; as part of a function prologue.",
"\tpush ebx",
"\tpush esi",
"\tpush edi",
"%endmacro",
"",
"%macro load_nonvolatile 0",
"\t; Load all non-volatile data registers. This is meant to be used",
"\t; as part of a function epilogue.",
"\tpop edi",
"\tpop esi",
"\tpop ebx",
"%endmacro",
		]
	}
}